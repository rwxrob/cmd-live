#!/bin/bash
# shellcheck disable=SC2016
set -e

(( BASH_VERSINFO[0] < 4 )) && echo "Bash 4+ required." && exit 1

: "${PAGER:=more}"
: "${EDITOR:=vi}"
: "${HELP_BROWSER:=}"
: "${EXE:="${0##*/}"}"

declare -A HELP
declare -A CONF

_initialize() {
  : # put initialization code here
}

_alternatives() {
  # put alternative argument possibilities here
  if [[ $CMD = f ]];then
    x.foo "$@"
  fi
}

HELP[main]='
# Live Streaming Mode and Status Update Utility

## Dependencies

Required:

* Bash 4+
* `jq`

Optional:

* `pandoc` - for rich help docs

## Justification

Streaming multiple categories can be difficult to manage -- especially
when one considers all the possible tags to be used.

## Legal

Copyright 2021 Rob Muhlestein <rob@rwx.gg>  
Released under Apache-2.0 License  
Please mention rwxrob.tv'

HELP[foo]='Foos things.'

x.foo () {
  _filter "$@" && return $?
  echo "would foo: $*"
}

HELP[bar]='

```
'"$EXE"' bar
```

Bar the things.'

x.bar() {
  _buffer "$@" && return $?
  echo "would bar: $*"
}

# completion for tags (autogenerated)

x.tag.beginners() { x.config tag.beginners "$@";}
x.tag.leveling() { x.config tag.leveling "$@";}
x.tag.gamedev() { x.config tag.gamedev "$@";}
x.tag.musicevents() { x.config tag.musicevents "$@";}
x.tag.retro() { x.config tag.retro "$@";}
x.tag.evil() { x.config tag.evil "$@";}
x.tag.filming() { x.config tag.filming "$@";}
x.tag.linux() { x.config tag.linux "$@";}
x.tag.interviews() { x.config tag.interviews "$@";}
x.tag.robotics() { x.config tag.robotics "$@";}
x.tag.musictalk() { x.config tag.musictalk "$@";}
x.tag.wargame() { x.config tag.wargame "$@";}
x.tag.chill() { x.config tag.chill "$@";}
x.tag.outdoors() { x.config tag.outdoors "$@";}
x.tag.ama() { x.config tag.ama "$@";}
x.tag.usa() { x.config tag.usa "$@";}
x.tag.hard() { x.config tag.hard "$@";}
x.tag.animation() { x.config tag.animation "$@";}
x.tag.playwith() { x.config tag.playwith "$@";}
x.tag.engineering() { x.config tag.engineering "$@";}
x.tag.movement() { x.config tag.movement "$@";}
x.tag.news() { x.config tag.news "$@";}
x.tag.editing() { x.config tag.editing "$@";}
x.tag.graphicdesign() { x.config tag.graphicdesign "$@";}
x.tag.acoustic() { x.config tag.acoustic "$@";}
x.tag.endurance() { x.config tag.endurance "$@";}
x.tag.explore() { x.config tag.explore "$@";}
x.tag.writing() { x.config tag.writing "$@";}
x.tag.warmingup() { x.config tag.warmingup "$@";}
x.tag.vectorart() { x.config tag.vectorart "$@";}
x.tag.cozy() { x.config tag.cozy "$@";}
x.tag.spirituality() { x.config tag.spirituality "$@";}
x.tag.viewerlevels() { x.config tag.viewerlevels "$@";}
x.tag.behindscenes() { x.config tag.behindscenes "$@";}
x.tag.worldbuild() { x.config tag.worldbuild "$@";}
x.tag.100() { x.config tag.100 "$@";}
x.tag.cycling() { x.config tag.cycling "$@";}
x.tag.softdev() { x.config tag.softdev "$@";}
x.tag.safespace() { x.config tag.safespace "$@";}
x.tag.epic() { x.config tag.epic "$@";}
x.tag.tradart() { x.config tag.tradart "$@";}
x.tag.meditation() { x.config tag.meditation "$@";}
x.tag.mealprep() { x.config tag.mealprep "$@";}
x.tag.programming() { x.config tag.programming "$@";}
x.tag.tutorial() { x.config tag.tutorial "$@";}
x.tag.mindfulness() { x.config tag.mindfulness "$@";}
x.tag.easy() { x.config tag.easy "$@";}
x.tag.play() { x.config tag.play "$@";}
x.tag.educational() { x.config tag.educational "$@";}
x.tag.firstplay() { x.config tag.firstplay "$@";}
x.tag.chatty() { x.config tag.chatty "$@";}
x.tag.reading() { x.config tag.reading "$@";}
x.tag.good() { x.config tag.good "$@";}
x.tag.business() { x.config tag.business "$@";}
x.tag.twitchcon() { x.config tag.twitchcon "$@";}
x.tag.travel() { x.config tag.travel "$@";}
x.tag.cooperative() { x.config tag.cooperative "$@";}
x.tag.surfing() { x.config tag.surfing "$@";}
x.tag.webdev() { x.config tag.webdev "$@";}
x.tag.strength() { x.config tag.strength "$@";}
x.tag.casuals() { x.config tag.casuals "$@";}
x.tag.coworking() { x.config tag.coworking "$@";}
x.tag.skateboarding() { x.config tag.skateboarding "$@";}
x.tag.practice() { x.config tag.practice "$@";}
x.tag.allbosses() { x.config tag.allbosses "$@";}
x.tag.backseating() { x.config tag.backseating "$@";}
x.tag.vlogging() { x.config tag.vlogging "$@";}
x.tag.magic() { x.config tag.magic "$@";}
x.tag.bodypositive() { x.config tag.bodypositive "$@";}
x.tag.balance() { x.config tag.balance "$@";}
x.tag.achievements() { x.config tag.achievements "$@";}
x.tag.hiking() { x.config tag.hiking "$@";}

# completion for catagories (autogenerated)

x.cat.16676() { x.config cat.16676 "$@";}
x.cat.493575() { x.config cat.493575 "$@";}
x.cat.29595() { x.config cat.29595 "$@";}
x.cat.272263131() { x.config cat.272263131 "$@";}
x.cat.417752() { x.config cat.417752 "$@";}
x.cat.26936() { x.config cat.26936 "$@";}
x.cat.509660() { x.config cat.509660 "$@";}
x.cat.515214() { x.config cat.515214 "$@";}
x.cat.498592() { x.config cat.498592 "$@";}
x.cat.115977() { x.config cat.115977 "$@";}
x.cat.509658() { x.config cat.509658 "$@";}
x.cat.1469308723() { x.config cat.1469308723 "$@";}
x.cat.509670() { x.config cat.509670 "$@";}
x.cat.509671() { x.config cat.509671 "$@";}
x.cat.509672() { x.config cat.509672 "$@";}
x.cat.509673() { x.config cat.509673 "$@";}

# completion for modes (autogenerated)

x.mode.jaunt.category() { x.config mode.jaunt.category "$@";}
x.mode.skate.category() { x.config mode.skate.category "$@";}
x.mode.rant.name() { x.config mode.rant.name "$@";}
x.mode.hang.category() { x.config mode.hang.category "$@";}
x.mode.yoga.name() { x.config mode.yoga.name "$@";}
x.mode.morning.category() { x.config mode.morning.category "$@";}
x.mode.away.flags() { x.config mode.away.flags "$@";}
x.mode.talk.emoji() { x.config mode.talk.emoji "$@";}
x.mode.write.category() { x.config mode.write.category "$@";}
x.mode.music.name() { x.config mode.music.name "$@";}
x.mode.witcher3.category() { x.config mode.witcher3.category "$@";}
x.mode.shenzen.category() { x.config mode.shenzen.category "$@";}
x.mode.learn.category() { x.config mode.learn.category "$@";}
x.mode.write.name() { x.config mode.write.name "$@";}
x.mode.hang.emoji() { x.config mode.hang.emoji "$@";}
x.mode.rant.tags() { x.config mode.rant.tags "$@";}
x.mode.work.category() { x.config mode.work.category "$@";}
x.mode.dota2.category() { x.config mode.dota2.category "$@";}
x.mode.witcher3.emoji() { x.config mode.witcher3.emoji "$@";}
x.mode.yoga.category() { x.config mode.yoga.category "$@";}
x.mode.record.status() { x.config mode.record.status "$@";}
x.mode.learn.status() { x.config mode.learn.status "$@";}
x.mode.jaunt.emoji() { x.config mode.jaunt.emoji "$@";}
x.mode.skate.emoji() { x.config mode.skate.emoji "$@";}
x.mode.code.tags() { x.config mode.code.tags "$@";}
x.mode.rant.emoji() { x.config mode.rant.emoji "$@";}
x.mode.tf2.status() { x.config mode.tf2.status "$@";}
x.mode.party.category() { x.config mode.party.category "$@";}
x.mode.hack.emoji() { x.config mode.hack.emoji "$@";}
x.mode.course.category() { x.config mode.course.category "$@";}
x.mode.art.category() { x.config mode.art.category "$@";}
x.mode.tf2.name() { x.config mode.tf2.name "$@";}
x.mode.shenzen.name() { x.config mode.shenzen.name "$@";}
x.mode.party.status() { x.config mode.party.status "$@";}
x.mode.bike.status() { x.config mode.bike.status "$@";}
x.mode.work.name() { x.config mode.work.name "$@";}
x.mode.learn.emoji() { x.config mode.learn.emoji "$@";}
x.mode.away.tags() { x.config mode.away.tags "$@";}
x.mode.hack.flags() { x.config mode.hack.flags "$@";}
x.mode.work.status() { x.config mode.work.status "$@";}
x.mode.record.name() { x.config mode.record.name "$@";}
x.mode.away.name() { x.config mode.away.name "$@";}
x.mode.record.category() { x.config mode.record.category "$@";}
x.mode.music.emoji() { x.config mode.music.emoji "$@";}
x.mode.skate.flags() { x.config mode.skate.flags "$@";}
x.mode.clean.status() { x.config mode.clean.status "$@";}
x.mode.run.emoji() { x.config mode.run.emoji "$@";}
x.mode.shenzen.emoji() { x.config mode.shenzen.emoji "$@";}
x.mode.run.status() { x.config mode.run.status "$@";}
x.mode.dota2.status() { x.config mode.dota2.status "$@";}
x.mode.music.status() { x.config mode.music.status "$@";}
x.mode.code.flags() { x.config mode.code.flags "$@";}
x.mode.jaunt.status() { x.config mode.jaunt.status "$@";}
x.mode.skate.status() { x.config mode.skate.status "$@";}
x.mode.bike.name() { x.config mode.bike.name "$@";}
x.mode.code.emoji() { x.config mode.code.emoji "$@";}
x.mode.run.category() { x.config mode.run.category "$@";}
x.mode.course.emoji() { x.config mode.course.emoji "$@";}
x.mode.art.emoji() { x.config mode.art.emoji "$@";}
x.mode.clean.name() { x.config mode.clean.name "$@";}
x.mode.hack.status() { x.config mode.hack.status "$@";}
x.mode.party.name() { x.config mode.party.name "$@";}
x.mode.talk.status() { x.config mode.talk.status "$@";}
x.mode.tf2.category() { x.config mode.tf2.category "$@";}
x.mode.break.flags() { x.config mode.break.flags "$@";}
x.mode.break.status() { x.config mode.break.status "$@";}
x.mode.course.name() { x.config mode.course.name "$@";}
x.mode.art.name() { x.config mode.art.name "$@";}
x.mode.morning.name() { x.config mode.morning.name "$@";}
x.mode.yoga.flags() { x.config mode.yoga.flags "$@";}
x.mode.morning.status() { x.config mode.morning.status "$@";}
x.mode.run.flags() { x.config mode.run.flags "$@";}
x.mode.dota2.name() { x.config mode.dota2.name "$@";}
x.mode.tf2.emoji() { x.config mode.tf2.emoji "$@";}
x.mode.learn.name() { x.config mode.learn.name "$@";}
x.mode.witcher3.name() { x.config mode.witcher3.name "$@";}
x.mode.yoga.emoji() { x.config mode.yoga.emoji "$@";}
x.mode.code.status() { x.config mode.code.status "$@";}
x.mode.party.emoji() { x.config mode.party.emoji "$@";}
x.mode.clean.category() { x.config mode.clean.category "$@";}
x.mode.morning.emoji() { x.config mode.morning.emoji "$@";}
x.mode.break.name() { x.config mode.break.name "$@";}
x.mode.hack.name() { x.config mode.hack.name "$@";}
x.mode.clean.flags() { x.config mode.clean.flags "$@";}
x.mode.clean.emoji() { x.config mode.clean.emoji "$@";}
x.mode.bike.category() { x.config mode.bike.category "$@";}
x.mode.talk.name() { x.config mode.talk.name "$@";}
x.mode.break.category() { x.config mode.break.category "$@";}
x.mode.hack.category() { x.config mode.hack.category "$@";}
x.mode.hang.status() { x.config mode.hang.status "$@";}
x.mode.away.status() { x.config mode.away.status "$@";}
x.mode.code.name() { x.config mode.code.name "$@";}
x.mode.talk.category() { x.config mode.talk.category "$@";}
x.mode.bike.emoji() { x.config mode.bike.emoji "$@";}
x.mode.work.tags() { x.config mode.work.tags "$@";}
x.mode.away.category() { x.config mode.away.category "$@";}
x.mode.write.emoji() { x.config mode.write.emoji "$@";}
x.mode.hang.name() { x.config mode.hang.name "$@";}
x.mode.work.emoji() { x.config mode.work.emoji "$@";}
x.mode.rant.category() { x.config mode.rant.category "$@";}
x.mode.bike.flags() { x.config mode.bike.flags "$@";}
x.mode.witcher3.status() { x.config mode.witcher3.status "$@";}
x.mode.away.emoji() { x.config mode.away.emoji "$@";}
x.mode.shenzen.status() { x.config mode.shenzen.status "$@";}
x.mode.break.emoji() { x.config mode.break.emoji "$@";}
x.mode.rant.flags() { x.config mode.rant.flags "$@";}
x.mode.work.flags() { x.config mode.work.flags "$@";}
x.mode.yoga.status() { x.config mode.yoga.status "$@";}
x.mode.jaunt.name() { x.config mode.jaunt.name "$@";}
x.mode.skate.name() { x.config mode.skate.name "$@";}
x.mode.dota2.emoji() { x.config mode.dota2.emoji "$@";}
x.mode.rant.status() { x.config mode.rant.status "$@";}
x.mode.code.category() { x.config mode.code.category "$@";}
x.mode.course.status() { x.config mode.course.status "$@";}
x.mode.art.status() { x.config mode.art.status "$@";}
x.mode.write.status() { x.config mode.write.status "$@";}
x.mode.write.flags() { x.config mode.write.flags "$@";}
x.mode.run.name() { x.config mode.run.name "$@";}
x.mode.music.category() { x.config mode.music.category "$@";}
x.mode.record.emoji() { x.config mode.record.emoji "$@";}

############################## BOILERPLATE ###########################
## Everything from here to the end of file can be snipped and updated
## with latest from https://github.com/rwxrob/template-bash-command.

# -------------------------- utility command -------------------------

HELP[usage]='Displays a summary of usage.'

x.usage() {
  local -a cmds
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:1} =~ _ ]] && continue
    cmds+=("$c")
  done
  local IFS='|'
  printf "usage: %s (%s)\n" "$EXE" "${cmds[*]}"
}

# --------------------------- help command ---------------------------

HELP[help]='

```
'"$EXE"' help [COMMAND]
```

Displays specific help information. If no argument is passed displays
general help information (main). Otherwise, the documentation for the
specific argument keyword is displayed, which usually corresponds to
a COMMAND name (but not necessarily). All documentation is written in
GitHub Flavored Markdown and will displayed as a web page if `pandoc`
and `$HELP_BROWSER` are detected, otherwise, just the Markdown is sent
to `$PAGER` (default: more).

Also see `readme` and `usage` commands.
'

x.help() { 
  local name="${1:-main}" title body
  title=$(_help_title "$name") || true
  if [[ -z "$title" ]]; then
    body="${HELP[$name]}"
    title="$EXE $name"
    [[ $name = main ]] && title="$EXE"
  else
    body="${HELP[$name]}"
    body=${body#*$title}
  fi
  local file="/tmp/help-$EXE-$name.html"
  if _have pandoc ; then
    if _have "$HELP_BROWSER" && [[ -t 1 ]] ;then
      pandoc -f gfm -s --metadata title="$title" \
        -o "$file" <<< "$body"
      [[ -z "$2" ]] && cd /tmp && exec "$HELP_BROWSER" "$file"
      return 0
    fi
    pandoc -f gfm -s --metadata title="$title" \
      -t plain <<< "$body" | "$PAGER"
    return 0
  fi
  echo -e "$title\n\n$body" | "$PAGER"
}

_help_title() {
  _filter "$@" && return $?;
  local name="$1"
  while IFS= read -r line; do
    [[ $line =~ ^[:space]*$ ]] && continue
    [[ $line =~ ^#\ (.+) ]] && echo "${BASH_REMATCH[1]}" && return 0
    return 1
  done <<< "${HELP[$name]}"
}

# -------------------------- readme command --------------------------

HELP[readme]='
## Generate `README.md` File

```
'"$EXE"' readme > README.md
```

The `readme` command will output the embedded help documentation in raw
GitHub Flavored Markdown suitable for use as a `README.md` file on
GitHub or similar hosting service.'

x.readme() {
  _trim "${HELP[main]}"
  echo
  while IFS= read -r name; do
    [[ $name = main ]] && continue
    body=$(_trim "${HELP[$name]}")
    [[ $body =~ ^\# ]] || body="## The \`$name\` Command"$'\n\n'$body
    printf "%s\n\n" "$body"
  done < <(printf "%s\n" "${!HELP[@]}" | LC_COLLATE=C sort)
  echo -e "----\n\n*Autogenerated $(date)*\n"
}

# x.json() { _jsonstr "$@"; }
# x.urlencode() { _urlencode "$@"; }

# -------------------------- config command --------------------------

HELP[config]='

```
'"$EXE"' config
'"$EXE"' config KEY
'"$EXE"' config KEY VALUE
'"$EXE"' config KEY ""
'"$EXE"' config keys
'"$EXE"' config val[ues]
'"$EXE"' config dir[ectory]
'"$EXE"' config path [file]
'"$EXE"' config edit [file]
'"$EXE"' config del[ete]
```

The `config` command is for reading, writing, and displaying standard
open desktop configuration properties. Pass an empty string to delete
a property.

### Arguments

With no arguments outputs all the currently cached configuration
settings.

With a single KEY argument fetches the value for that key and outputs
it unless it is one of the following special (reserved) key names:

* `dir*` full path to config directory
* `path` full path to specific config file (default: `values`) 
* `edit` opens config file in editor (default: `editor` or `$EDITOR)
* `keys` output the configuration keys, one per line
* `val*` output the configuration values, one per line
* `del*` if key argument then delete a specific key, otherwise prompt

With more than one argument the remaining arguments after the KEY will
be combined into the VALUE and written to a `values` file in the
configuration directory. 

### Configuration Directory

The configuration directory path relies on the following environment
variables:

* `EXE` - defaults to name of currently running command ('"$EXE"')
* `HOME` - checked for `$HOME/.config/$EXE/values`
* `XDG_CONFIG_HOME` - overrides `$HOME/.config`
* `CONFIG_DIR` - full path to directory containing `values` file

The `CONFIG_DIR` always takes priority over anything else if set, but is
never implied. If the directory does not exist it will be created the
first time a value is set.

### Configuration `values` File Format

The file (which is almost always located at
`~/.config/'"$EXE"'/values`) uses the simplest possible format to
facilitate standard UNIX parsing and filtering with any number of
existing tools (and no `jq` dependency).

* One KEY=VALUE per line
* KEYs may be anything but the equal sign (`=`)
* VALUEs may be anything but line returns must be escaped

Note that this is *not* the same as Java properties and other similar
format. It is designed for ultimate simplicity, efficiency, and
portability.'

x.config() {
  case $1 in 
    dir*) shift; _config_dir  "$@"; return $? ;;
    path) shift; _config_path "$@"; return $? ;;
    edit) shift; _config_edit "$@"; return $? ;;
    del*) shift; _config_del  "$@"; return $? ;;
    keys) shift; _config_keys "$@"; return $? ;;
    val*) shift; _config_vals "$@"; return $? ;;
  esac
  case $# in
    0) _config_dump ;;
    1) _config_get "$@" ;;
    *) _config_set "$@" ;;
  esac
}

_config_edit() {
  : "${CONF[editor]:="${EDITOR:=vi}"}"
  exec "${CONF[editor]}" "$(_config_path "${1:-values}")"
}

_config_del() {
  if [[ -z "$1" ]];then
    select key in "${!CONF[@]}"; do
      _config_del "$key"
      return $? 
    done
  fi
  _config_set "$1" ''
}

_config_keys() { printf "%s\n" "${!CONF[@]}"; }

_config_vals() { printf "%s\n" "${CONF[@]}"; }

_config_dir() {
  local dir="$HOME/.config/$EXE"
  [[ -n "$XDG_CONFIG_HOME" ]] && dir="$XDG_CONFIG_HOME/$EXE" 
  [[ -n "$CONFIG_DIR" ]] && dir="$CONFIG_DIR"
  [[ -n "$1" ]] && echo "$dir/$1" && return 0
  printf "%s" "$dir"
  [[ -t 1 ]] && echo
}

_config_path() { 
  local file=${1:-values}
  printf "%s/%s" "$(_config_dir)" "$file"
  [[ -t 1 ]] && echo
}

_config_set() {
  local key="$1"; shift; local val="$*"
  val="${val//$'\n'/\\n}"
  CONF["$key"]="$val"
  _config_write
}

_config_get() { 
  printf "${CONF[$1]}"
  [[ -t 1 ]] && echo
}

_config_read() {
  local values="$(_config_path)"
  [[ -r "$values" ]] || return 0
  while IFS= read -r line; do
    [[ $line =~ ^([^=]+)=(.+)$ ]] || continue
    CONF["${BASH_REMATCH[1]}"]="${BASH_REMATCH[2]}"
  done < "$values"
}

_config_write() {
  local dir="$(_config_dir)"
  mkdir -p "$dir"
  _config_dump > "$dir/values"
}

_config_dump() {
  (( ${#CONF[@]} == 0 )) && return 0
  paste -d=\
    <(printf "%s\n" "${!CONF[@]}") \
    <(printf "%s\n" "${CONF[@]}") \
  | sort
}

# ----------------------------- utilities ----------------------------

_jsonstr() {
  _checkdep jq || return $?
  _buffer "$@" && return $?
  jq -MRsc <<< "$1"
}

_urlencode() {
  _buffer "$@" && return $?
  local string="$1"
  local strlen=${#string}
  local encoded=""
  local pos c o
  for ((pos = 0; pos < strlen; pos++)); do
    c=${string:$pos:1}
    case "$c" in
    [-_.~a-zA-Z0-9]) o="$c" ;;
    *) printf -v o '%%%02x' "'$c'" ;;
    esac
    encoded+="$o"
  done
  echo "$encoded"
}

_reduce() {
  local -n name="${1:?"name of array required"}"
  while IFS= read -r key; do
    [[ $key =~ $2 ]] && echo "$key"
  done < <(printf "%s\n" "${name[@]}")
}

_newest() {
  IFS=$'\n'
  local -a f=($(ls -1 --color=never -trd ${1:-.}/* 2>/dev/null))
  [[ ${#f} > 0 ]] && echo "${f[-1]}"
}

_trim() {
  local it="${1#"${1%%[![:space:]]*}"}"
  echo -e "${it%"${it##*[![:space:]]}"}"
}

_have(){ type "$1" &>/dev/null; }

_checkdep() {
  _have "$1" && return 0
  echo "'$EXE' depends on '$1' for this, but not found"
  return 1
}

_filter(){
  [[ -n "$1" ]] && return 1
  while IFS= read -ra args; do
    "${FUNCNAME[1]}" "${args[@]}"
  done
}

_buffer() {
  [[ -n "$1" ]] && return 1
  "${FUNCNAME[1]}" "$(</dev/stdin)"
}

# --------------------- completion and delegation --------------------
#      `complete -C foo foo` > `source <(foo bloated_completion)`

while IFS= read -r line; do
  [[ $line =~ ^declare\ -f\ x\. ]] || continue
  COMMANDS+=( "${line##declare -f x.}" )
done < <(declare -F)
mapfile -t COMMANDS < \
  <(LC_COLLATE=C sort < <(printf "%s\n" "${COMMANDS[@]}"))

if [[ -n $COMP_LINE ]]; then
  line=${COMP_LINE#* }
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:${#line}} == "${line,,}" ]] && echo "$c"
  done
  exit
fi

_config_read
_have _initialize && _initialize "$@"

for c in "${COMMANDS[@]}"; do
  if [[ $c == "$EXE" ]]; then
    "x.$EXE" "$@"
    exit $?
  fi
done

if [[ -n "$1" ]]; then
  declare CMD="$1"; shift
  for c in "${COMMANDS[@]}"; do
    if [[ $c == "$CMD" ]]; then
      "x.$CMD" "$@"
      exit $?
    fi
  done
fi

if _have _alternatives; then
  _alternatives "$@" 
  exit $?
fi

x.usage "$@"
